name: 'Apro Server CI/CD'

on:
  push:
    branches:
      - dev

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create .env file
        run: |
          touch .env
          echo "DB_URL=${{ secrets.DB_URL }}" >> .env
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "JWT_KEY=${{ secrets.JWT_KEY }}" >> .env
          echo "ACCESS_HEADER=${{ secrets.ACCESS_HEADER }}" >> .env
          echo "ACCESS_EXP=${{ secrets.ACCESS_EXP }}" >> .env
          echo "REFRESH_HEADER=${{ secrets.REFRESH_HEADER }}" >> .env
          echo "REFRESH_EXP=${{ secrets.REFRESH_EXP }}" >> .env

      - name: copy .env file
        run: cp .env ./deploy/

      - name: Build Docker image
        run: |
          docker build --platform linux/amd64 -t apro_backend -f ./deploy/Dockerfile .

      - name: Save Docker image to tar file
        run: |
          docker save -o apro_backend.tar apro_backend
          ls -l

      - name: scp docker image tar file
        uses: cross-the-world/ssh-scp-ssh-pipelines@latest
        with:
          host: ${{secrets.SERVER_HOST}}
          user: ${{secrets.SERVER_USER}}
          pass: ${{secrets.SERVER_PWD}}
          scp: |
            'apro_backend.tar' => /home/ubuntu/deploy
            './deploy/check.sh' => /home/ubuntu/deploy
          last_ssh: |
            sh ./deploy/check.sh
            docker load < /home/ubuntu/deploy/apro_backend.tar
            docker run -itd --name apro_backend -p 8080:8080 apro_backend
