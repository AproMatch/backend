name: Apro-BE CICD

on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Gradle Caching
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*gradle*','**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Gradle 빌드
      - name: Build with Gradle Wrapper
        run: ./gradlew build

      # Docker 이미지 생성 후 이미지 push
      - name: Docker build & push to dev
        run: |
          docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/apro:latest .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/apro:latest

      # EC2 SSH 연결 후 이미지 pull
      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ubuntu
          key: ${{ secrets.SERVER_PASSWORD }}
          envs: GITHUB_SHA, DB_HOST, DB_PORT, DB_USER, DB_PASSWORD, API_KEY
          script: |
            EXISTING_CONTAINER_ID=$(sudo docker ps -q -f "publish=8080" -f "status=running")
            if [ ! -z "$EXISTING_CONTAINER_ID" ]; then
              sudo docker stop $EXISTING_CONTAINER_ID
              sudo docker rm $EXISTING_CONTAINER_ID
            fi

            EXISTING_CONTAINER_ID=$(sudo docker ps -q -f "publish=8080" -f "status=exited")
            if [ ! -z "$EXISTING_CONTAINER_ID" ]; then
              sudo docker rm $EXISTING_CONTAINER_ID
            fi
            
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/apro:latest
            sudo docker run --name spring -d -p 8080:8080 \
              -e DB_HOST=${{ secrets.DB_HOST }} \
              -e DB_PORT=${{ secrets.DB_PORT }} \
              -e DB_USER=${{ secrets.DB_USER }} \
              -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
              -e API_KEY=${{ secrets.API_KEY }} \
              ${{ secrets.DOCKERHUB_USERNAME }}/apro:latest
            sudo docker image prune -a -f
