name: Apro-BE CICD

on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Install Docker CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y docker.io

      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*gradle*','**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build with Gradle Wrapper
        run: ./gradlew build

      - name: Docker build and push
        run: |
          docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/apro:latest .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/apro:latest

      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ubuntu
          key: ${{ secrets.SERVER_PASSWORD }}
          envs: DB_URL, DB_USERNAME, DB_PASSWORD, JWT_KEY, ACCESS_HEADER, ACCESS_EXP, REFRESH_HEADER, REFRESH_EXP
          script: |
            set -e

            # Install Docker on remote server (if not already installed)
            ssh ubuntu@${{ secrets.SERVER_HOST }} 'sudo apt-get update && sudo apt-get install -y docker.io'

            # Stop and remove existing Docker container if running
            ssh ubuntu@${{ secrets.SERVER_HOST }} 'EXISTING_CONTAINER_ID=$(sudo docker ps -q -f "publish=8080" -f "status=running"); \
              if [ ! -z "$EXISTING_CONTAINER_ID" ]; then \
                sudo docker stop $EXISTING_CONTAINER_ID; \
                sudo docker rm $EXISTING_CONTAINER_ID; \
              fi'

            # Remove stopped Docker container if exists
            ssh ubuntu@${{ secrets.SERVER_HOST }} 'EXISTING_CONTAINER_ID=$(sudo docker ps -q -f "publish=8080" -f "status=exited"); \
              if [ ! -z "$EXISTING_CONTAINER_ID" ]; then \
                sudo docker rm $EXISTING_CONTAINER_ID; \
              fi'

            # Pull latest Docker image from Docker Hub
            ssh ubuntu@${{ secrets.SERVER_HOST }} 'sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/apro:latest'

            # Run Docker container with environment variables
            ssh ubuntu@${{ secrets.SERVER_HOST }} 'sudo docker run --name spring -d -p 8080:8080 \
              -e DB_URL="${{ secrets.DB_URL }}" \
              -e DB_USERNAME="${{ secrets.DB_USERNAME }}" \
              -e DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
              -e JWT_KEY="${{ secrets.JWT_KEY }}" \
              -e ACCESS_HEADER="${{ secrets.ACCESS_HEADER }}" \
              -e ACCESS_EXP="${{ secrets.ACCESS_EXP }}" \
              -e REFRESH_HEADER="${{ secrets.REFRESH_HEADER }}" \
              -e REFRESH_EXP="${{ secrets.REFRESH_EXP }}" \
              ${{ secrets.DOCKERHUB_USERNAME }}/apro:latest'

            # Clean up unused Docker images
            ssh ubuntu@${{ secrets.SERVER_HOST }} 'sudo docker image prune -a -f'
